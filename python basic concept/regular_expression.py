# 정규 표현식
# 메타 문자 (meta characters) = 원래 그 문자가 가진 뜻이 아닌 특별한 용도로 사용하는 문자
# . ^ $ * + ? { } [ ] \ | ( )

# 1. 문자 클래스 []
# - 문자 클래스로 만들어진 정규식은 "[] 사이의 문자들과 매치" 라는 의미를 가짐
# * 예를 들어 [abc] 라면 이는 "a, b, c 중 한 개의 문자와 매치" 를 뜻함
#   - ex. "a", "before", "dude"가 정규식 [abc]와 어떻게 매치되는지 살펴보기
#   - "a" 는 정규식과 일치하는 문자인 "a"가 있으므로 매치
#   - "before" 는 정규식과 일치하는 문자인 "b"가 있으므로 매치
#   - "dude" 는 정규식과 일치하는 문자인 a,b,c 중 어느 하나도 포함하지 않으므로 매치 X 
# * []안의 두 문자 사이에 하이폰(-)을 사용하면 두 문자 사이의 범위 (from-to)를 의미
#   - ex. [a-c] = [abc]
#   - ex. [0-5] = [012345]
#   - ex. [a-zA-Z] = 알파벳 모두
#   - ex. [0-9] = 숫자 모두
# * "^"
#   = 문자 클래스안에 "^"를 사용할 경우 반대(not)이라는 의미를 가짐
#   - ex. [^0-9] = 숫자가 아닌 문자만 매치
# 자주 사용하는 문자 클래스
# * \d = 숫자와 매치. [0-9]와 동일
# * \D = 숫자가 아닌 것과 매치. [^0-9]와 동일
# * \s = whitespace 문자와 매치. [ \t\n\r\f\v]와 동일 (맨 앞의 빈칸은 공백문자(space))
# * \S = whitespace 문자가 아닌 것과 매치. [^ \t\n\r\f\v]와 동일
# * \w = 문자 + 숫자 (alphanumeric)와 매치. [a-zA-Z0-9_]와 동일
# * \W = 문자 + 숫자 (alphanumeric)이 아닌 문자와 매치. [^a-zA-Z0-9_]와 동일

# 2. Dot(.)
# 줄바꿈 문자 \n을 제외한 모든 문자와 매치됨
# ex. a.b = "a + 모든문자 + b"
#   = a와 b사이에 어떤 문자가 들어가도 매치됨
#   - "aab" => 정규식과 매치
#   - "a0b" => 정규식과 매치
#   - "abc" => "a" 와 "b" 사이에 어떤 문자라도 있어야 하므로 매치되지 않음
# ex. a[.]b =>  "a + Dot(.)문자 + b"
#   = a 와 b 사이에 "."이 문자로 적혀야함.

# 3. *
# 바로 앞에있는 문자의 반복을 의미함. (메모리 제한(2억 개) 내에서 무한으로 반복가능)
# 반복횟수 0부터 가능
# ex. ca*t
#   - ct = 매치.
#   - caaaaaaaat = 매치.

# 4. +
# 최소 1번 이상 반복될 때 사용
# ex. ca+t
#   - ct = 매치 안됨.
#   - cat = 매치.

# 5. {m,n}
# 반복횟수 고정 가능
# {m,n} = 반복횟수가 m부터 n까지 매치
# 둘중에 하나 생략가능 
# 생략된 m = 0, 생략된 n = 무한대
#   - {3,} = 반복횟수가 3 이상인 경우
#   - {,3} = 반복횟수가 3 이하인 경우
# ex. ca{2}t
# = c + a(반드시 2번 반복) + t
#   - cat = a가 1번만 반복되어 매치되지 않음.
#   - caat = a가 2번 반복되어 매치
# ex. ca{2,5}t
#= c + a(2~5회 반복) + t
#   - cat = a 가 한번만 반복되어 매치되지 않음.
#   - caaat = a 가 3번 반복되어 매치됨.

# 6. ?
# = ? 는 {0, 1}을 의미함
# ex. ab?c
# = a + b(있어도 되고 없어도 됨) + c
#   - abc = b가 한번 사용되어 매치
#   - ac = b가 한번도 사용되지 않아서 매치

# 정규 표현식 사용하기
import re
p = re.compile('ab*') # b 0부터 무제한으로 매치 가능

# 정규식을 이용한 문자열 검색
# 1. match()
# = 문자열의 처음부터 정규식과 매치되는지 조사.
# = 매치가 되면 match 객체를 돌려줌 / 매치가 안되면 None 돌려줌
# 2. search()
# = 문자열 전체를 검색하여 정규식과 매치되는지 조사.
# = 매치가 되면 match 객체를 돌려줌 / 매치가 안되면 None 돌려줌
# 3. findall()
# = 정규식과 매치되는 모든 문자열(substring) 을 리스트로 돌려줌.
# 4. finditer()
# = 정규식과 매치되는 모든 문자열(substring)을 반복 가능한 객체로 돌려줌.
# 예시 
p = re.compile('[a-z]+') # [a-z]가 최소 한번 이상 반복